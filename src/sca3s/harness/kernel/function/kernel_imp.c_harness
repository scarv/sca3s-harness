/* Copyright (C) 2018 SCARV project <info@scarv.org>
 *
 * Use of this source code is restricted per the MIT license, a copy of which 
 * can be found at https://opensource.org/licenses/MIT (or should be included 
 * as LICENSE.txt within the associated archive or repository).
 */

// ============================================================================

#include "kernel.h_harness_prologue_pt1"

// ----------------------------------------------------------------------------

#if   ( KERNEL_NAMEOF == KERNEL_NAMEOF_GENERIC   )
#define __KERNEL_NAMEOF   "generic"
#endif
#if   ( KERNEL_MODEOF == KERNEL_MODEOF_DEFAULT   )
#define __KERNEL_MODEOF   "default"
#endif

#define __KERNEL_ID       STR(VERSION) ":" KERNEL ":" __KERNEL_NAMEOF ":" __KERNEL_MODEOF

#define __KERNEL_NAMEOF_X(i) "x" # i
#define __KERNEL_SIZEOF_X(i) KERNEL_SIZEOF_X
#define __KERNEL_TYPEOF_X(i) KERNEL_TYPEOF_X ## i
#define __KERNEL_NAMEOF_R(i) "r" # i
#define __KERNEL_SIZEOF_R(i) KERNEL_SIZEOF_R
#define __KERNEL_TYPEOF_R(i) KERNEL_TYPEOF_R ## i

// ----------------------------------------------------------------------------

#pragma message( "?kernel"   " = "     __KERNEL_ID          )

#if   ( KERNEL_MODEOF == KERNEL_MODEOF_DEFAULT   )
#define __LOOP_BODY(i) "," __KERNEL_NAMEOF_X(i)
#pragma message( ">kernel"   " = " "esr"     __LOOP(KERNEL_ELEMOF_X) )
#undef  __LOOP_BODY
#define __LOOP_BODY(i) "," __KERNEL_NAMEOF_R(i)
#pragma message( "<kernel"   " = " "fec,fcc" __LOOP(KERNEL_ELEMOF_R) )
#undef  __LOOP_BODY
#endif

#pragma message( "?data fec" " = " "<"                      )
#pragma message( "|data fec" " = " INT(         SIZEOF_FEC) )
#pragma message( "#data fec" " = " INT(         SIZEOF_FEC) )
#pragma message( "?data fcc" " = " "<"                      )
#pragma message( "|data fcc" " = " INT(         SIZEOF_FCC) )
#pragma message( "#data fcc" " = " INT(         SIZEOF_FCC) )
#pragma message( "?data esr" " = " ">"                      )
#pragma message( "|data esr" " = " INT(  KERNEL_SIZEOF_ESR) )
#pragma message( "#data esr" " = " INT(  KERNEL_SIZEOF_ESR) )

#if ( KERNEL_ELEMOF_X > 0 )
#pragma message( "?data x0"  " = "       KERNEL_TYPEOF_X0   )
#pragma message( "|data x0"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x0"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 1 )
#pragma message( "?data x1"  " = "       KERNEL_TYPEOF_X1   )
#pragma message( "|data x1"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x1"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 2 )
#pragma message( "?data x2"  " = "       KERNEL_TYPEOF_X2   )
#pragma message( "|data x2"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x2"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 3 )
#pragma message( "?data x3"  " = "       KERNEL_TYPEOF_X3   )
#pragma message( "|data x3"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x3"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 4 )
#pragma message( "?data x4"  " = "       KERNEL_TYPEOF_X4   )
#pragma message( "|data x4"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x4"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 5 )
#pragma message( "?data x5"  " = "       KERNEL_TYPEOF_X5   )
#pragma message( "|data x5"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x5"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 6 )
#pragma message( "?data x6"  " = "       KERNEL_TYPEOF_X6   )
#pragma message( "|data x6"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x6"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_X > 7 )
#pragma message( "?data x7"  " = "       KERNEL_TYPEOF_X7   )
#pragma message( "|data x7"  " = " INT(  KERNEL_SIZEOF_X  ) )
#pragma message( "#data x7"  " = " INT(  KERNEL_SIZEOF_X  ) )
#endif
#if ( KERNEL_ELEMOF_R > 0 )      
#pragma message( "?data r0"  " = "       KERNEL_TYPEOF_R0   )
#pragma message( "|data r0"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r0"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 1 )
#pragma message( "?data r1"  " = "       KERNEL_TYPEOF_R1   )
#pragma message( "|data r1"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r1"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 2 )
#pragma message( "?data r2"  " = "       KERNEL_TYPEOF_R2   )
#pragma message( "|data r2"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r2"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 3 )
#pragma message( "?data r3"  " = "       KERNEL_TYPEOF_R3   )
#pragma message( "|data r3"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r3"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 4 )
#pragma message( "?data r4"  " = "       KERNEL_TYPEOF_R4   )
#pragma message( "|data r4"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r4"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 5 )
#pragma message( "?data r5"  " = "       KERNEL_TYPEOF_R5   )
#pragma message( "|data r5"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r5"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 6 )
#pragma message( "?data r6"  " = "       KERNEL_TYPEOF_R6   )
#pragma message( "|data r6"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r6"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif
#if ( KERNEL_ELEMOF_R > 7 )
#pragma message( "?data r7"  " = "       KERNEL_TYPEOF_R7   )
#pragma message( "|data r7"  " = " INT(  KERNEL_SIZEOF_R  ) )
#pragma message( "#data r7"  " = " INT(  KERNEL_SIZEOF_R  ) )
#endif

// ----------------------------------------------------------------------------

#include "kernel.h_harness_epilogue_pt1"

// ============================================================================

#include "kernel.h_harness_prologue_pt2"

// ----------------------------------------------------------------------------

/** @brief      The register    that contains the externally supplied randomness.
  */

uint8_t      esr                   [ KERNEL_SIZEOF_ESR ] = { KERNEL_INITOF_ESR };

/** @brief      The register    that contains the function exit code.
  */

kernel_fec_t fec                                         = KERNEL_FEC_SUCCESS;

/** @brief      The register    that contains the function cycle count.
  */

kernel_fcc_t fcc                                         = 0;

/** @brief      The register(s) that contain  the  input to   r = f( x ).
  */

uint8_t        x[ KERNEL_ELEMOF_X ][ KERNEL_SIZEOF_X   ] = { KERNEL_INITOF_X   };

/** @brief      The register(s) that contain  the output from r = f( x ).
  */

uint8_t        r[ KERNEL_ELEMOF_R ][ KERNEL_SIZEOF_R   ] = { KERNEL_INITOF_R   };

// ----------------------------------------------------------------------------

/** @brief      Number of used      bytes in the register(s) that contains the  input to   r = f( x ).
  */

len_t n_x[ KERNEL_ELEMOF_X ] = {};

/** @brief      Number of used      bytes in the register(s) that contains the output from r = f( x ).
  */

len_t n_r[ KERNEL_ELEMOF_R ] = {};

// ----------------------------------------------------------------------------

/** @brief      Generate a kernel identifier string.
  *
  * @param[out] \c x a (pointer to a) buffer into which the identifier string is copied.
  */

void kernel_id( char* x ) {
  strcpy( x, __KERNEL_ID );
}

/** @brief      Execute a NOP.
  *
  * @return     an instance of \c kernel_fec_t, 
  *             e.g.,
  *             \c KERNEL_FEC_FAILURE to indicate failure
  *             or 
  *             \c KERNEL_FEC_SUCCESS to indicate success;
  *             this is captured in \c fec, the function exit code register.
  */

kernel_fec_t nop() {
  return KERNEL_FEC_SUCCESS;
}

kernel_fec_t kernel_prologue();
kernel_fec_t kernel();
kernel_fec_t kernel_epilogue();

// ----------------------------------------------------------------------------

/** @brief      A specification of the
  *             registers
  *             accessible within the kernel.
  *
  * @note       By setting \c .id equal to \c NULL, the entry will act as a
  *             terminator for the array; such a terminator entry must exist
  *             as the final entry.
  */

kernel_data_spec_t kernel_data_spec[] = {
  { .id = "esr", .data = ( uint8_t* )(  esr ), .size = KERNEL_SIZEOF_ESR, .used = ( len_t* )( NULL ), .type =   KERNEL_DATA_TYPE_I },
  { .id = "fec", .data = ( uint8_t* )( &fec ), .size =        SIZEOF_FEC, .used = ( len_t* )( NULL ), .type =   KERNEL_DATA_TYPE_O },
  { .id = "fcc", .data = ( uint8_t* )( &fcc ), .size =        SIZEOF_FCC, .used = ( len_t* )( NULL ), .type =   KERNEL_DATA_TYPE_O },

#define __LOOP_BODY(i) { .id = __KERNEL_NAMEOF_X(i), .data = ( uint8_t* )( x[ i ] ), .size = __KERNEL_SIZEOF_X(i), .used = ( len_t* )( &n_x[ i ] ), .type = __KERNEL_TYPEOF_X(i) },
__LOOP(KERNEL_ELEMOF_X)
#undef  __LOOP_BODY

#define __LOOP_BODY(i) { .id = __KERNEL_NAMEOF_R(i), .data = ( uint8_t* )( r[ i ] ), .size = __KERNEL_SIZEOF_R(i), .used = ( len_t* )( &n_r[ i ] ), .type = __KERNEL_TYPEOF_R(i) },
__LOOP(KERNEL_ELEMOF_R)
#undef  __LOOP_BODY

  { .id =  NULL, .data = ( uint8_t* )( NULL ), .size = 0,                 .used = ( len_t* )( NULL ), .type = 0                    }
};

/** @brief      A specification of the
  *             functions
  *             accessible within the kernel.
  */

kernel_func_spec_t kernel_func_spec   = {
  .kernel_id       = kernel_id,

  .kernel_prologue = kernel_prologue,
  .kernel          = kernel,
  .kernel_epilogue = kernel_epilogue,

  .nop             = nop
};

// ----------------------------------------------------------------------------

#include "kernel.h_harness_epilogue_pt2"

// ============================================================================
