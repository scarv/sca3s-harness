/* Copyright (C) 2018 SCARV project <info@scarv.org>
 *
 * Use of this source code is restricted per the MIT license, a copy of which 
 * can be found at https://opensource.org/licenses/MIT (or should be included 
 * as LICENSE.txt within the associated archive or repository).
 */

// ============================================================================

#include "kernel.h_harness_prologue_pt1"

// ----------------------------------------------------------------------------

#if   ( KERNEL_NAMEOF == KERNEL_NAMEOF_GENERIC   )
#define __KERNEL_NAMEOF   "generic"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_1     )
#define __KERNEL_NAMEOF   "sha_1"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_224 )
#define __KERNEL_NAMEOF   "sha_2_224"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_256 )
#define __KERNEL_NAMEOF   "sha_2_256"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_384 )
#define __KERNEL_NAMEOF   "sha_2_384"
#elif ( KERNEL_NAMEOF == KERNEL_NAMEOF_SHA_2_512 )
#define __KERNEL_NAMEOF   "sha_2_512"
#endif
#if   ( KERNEL_MODEOF == KERNEL_MODEOF_DEFAULT   )
#define __KERNEL_MODEOF   "default"
#endif

#define __KERNEL_ID       STR(VERSION) ":" KERNEL ":" __KERNEL_NAMEOF ":" __KERNEL_MODEOF

#if   ( KERNEL_MODEOF == KERNEL_MODEOF_DEFAULT   )
#define __KERNEL_LISTOF_I "esr"     "," "m"
#define __KERNEL_LISTOF_O "fec,fcc" "," "d"

#define __KERNEL_TYPEOF_M CONS(KERNEL_DATA_TYPE_I,KERNEL_DATA_TYPE_V)
#define __KERNEL_TYPEOF_D      KERNEL_DATA_TYPE_O
#endif

// ----------------------------------------------------------------------------

#pragma message( "?kernel"   " = "     __KERNEL_ID          )

#pragma message( ">kernel"   " = "     __KERNEL_LISTOF_I    )
#pragma message( "<kernel"   " = "     __KERNEL_LISTOF_O    )

#pragma message( "?data fec" " = " "<"                      )
#pragma message( "|data fec" " = " INT(         SIZEOF_FEC) )
#pragma message( "#data fec" " = " INT(         SIZEOF_FEC) )
#pragma message( "?data fcc" " = " "<"                      )
#pragma message( "|data fcc" " = " INT(         SIZEOF_FCC) )
#pragma message( "#data fcc" " = " INT(         SIZEOF_FCC) )
#pragma message( "?data esr" " = " ">"                      )
#pragma message( "|data esr" " = " INT(  KERNEL_SIZEOF_ESR) )
#pragma message( "#data esr" " = " INT(  KERNEL_SIZEOF_ESR) )

#pragma message( "?data m"   " = "     __KERNEL_TYPEOF_M    )
#pragma message( "|data m"   " = " INT(  KERNEL_SIZEOF_M  ) )
#pragma message( "#data m"   " = " INT(  KERNEL_SIZEOF_M  ) )
#pragma message( "?data d"   " = "     __KERNEL_TYPEOF_D    )
#pragma message( "|data d"   " = " INT(  KERNEL_SIZEOF_D  ) )
#pragma message( "#data d"   " = " INT(  KERNEL_SIZEOF_D  ) )

// ----------------------------------------------------------------------------

#include "kernel.h_harness_epilogue_pt1"

// ============================================================================

#include "kernel.h_harness_prologue_pt2"

// ----------------------------------------------------------------------------

/** @brief      The register    that contains the externally supplied randomness.
  */

uint8_t      esr[ KERNEL_SIZEOF_ESR ] = { KERNEL_INITOF_ESR };

/** @brief      The register    that contains the function exit code.
  */

kernel_fec_t fec                      = KERNEL_FEC_SUCCESS;

/** @brief      The register    that contains the function cycle count.
  */

kernel_fcc_t fcc                      = 0;

/** @brief      The register    that contains the message.
  */

uint8_t        m[ KERNEL_SIZEOF_M   ] = { KERNEL_INITOF_M   };

/** @brief      The register    that contains the  digest.
  */

uint8_t        d[ KERNEL_SIZEOF_D   ] = { KERNEL_INITOF_D   };

// ----------------------------------------------------------------------------

/** @brief      Number of used      bytes in the register    that contains the message.
  */

len_t n_m = 0;

/** @brief      Number of used      bytes in the register    that contains the  digest.
  */

len_t n_d = 0;

// ----------------------------------------------------------------------------

/** @brief      Generate a kernel identifier string.
  *
  * @param[out] \c x a (pointer to a) buffer into which the identifier string is copied.
  */

void kernel_id( char* x ) {
  strcpy( x, __KERNEL_ID );
}

/** @brief      Execute a NOP.
  *
  * @return     an instance of \c kernel_fec_t, 
  *             e.g.,
  *             \c KERNEL_FEC_FAILURE to indicate failure
  *             or 
  *             \c KERNEL_FEC_SUCCESS to indicate success;
  *             this is captured in \c fec, the function exit code register.
  */

kernel_fec_t nop() {
  return KERNEL_FEC_SUCCESS;
}

kernel_fec_t kernel_prologue();
kernel_fec_t kernel();
kernel_fec_t kernel_epilogue();

// ----------------------------------------------------------------------------

/** @brief      A specification of the
  *             registers
  *             accessible within the kernel.
  *
  * @note       By setting \c .id equal to \c NULL, the entry will act as a
  *             terminator for the array; such a terminator entry must exist
  *             as the final entry.
  */

kernel_data_spec_t kernel_data_spec[] = {
  { .id = "esr", .data = ( uint8_t* )(  esr ), .size = KERNEL_SIZEOF_ESR, .used = ( len_t* )( NULL ), .type =   KERNEL_DATA_TYPE_I },
  { .id = "fec", .data = ( uint8_t* )( &fec ), .size =        SIZEOF_FEC, .used = ( len_t* )( NULL ), .type =   KERNEL_DATA_TYPE_O },
  { .id = "fcc", .data = ( uint8_t* )( &fcc ), .size =        SIZEOF_FCC, .used = ( len_t* )( NULL ), .type =   KERNEL_DATA_TYPE_O },

  { .id =   "m", .data = ( uint8_t* )(    m ), .size = KERNEL_SIZEOF_M,   .used = ( len_t* )( &n_m ), .type = __KERNEL_TYPEOF_M    },
  { .id =   "d", .data = ( uint8_t* )(    d ), .size = KERNEL_SIZEOF_D,   .used = ( len_t* )( &n_d ), .type = __KERNEL_TYPEOF_D    },

  { .id =  NULL, .data = ( uint8_t* )( NULL ), .size = 0,                 .used = ( len_t* )( NULL ), .type = 0                    }
};

/** @brief      A specification of the
  *             functions
  *             accessible within the kernel.
  */

kernel_func_spec_t kernel_func_spec   = {
  .kernel_id       = kernel_id,

  .kernel_prologue = kernel_prologue,
  .kernel          = kernel,
  .kernel_epilogue = kernel_epilogue,

  .nop             = nop
};

// ----------------------------------------------------------------------------

#include "kernel.h_harness_epilogue_pt2"

// ============================================================================
